#ifndef ASSET_H
#define ASSET_H

#include "LowLevelSystem.h"

#include <string>

namespace DavinciEngine{

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary> Values that represent AssetType. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	enum AssetType
	{
		ASSET_UNDEFINED,
		ASSET_TEXTURE,
		ASSET_AUDIO,
		ASSET_FONT
	};

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary> Values that represent FilterType. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	enum FilterType
	{
		FILTER_NONE,
		FILTER_LINEAR
	};

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary> Asset objects store a particular type of asset for the engine. It
	///			could be a texture asset, sounds asset, etc. This is a base class.</summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	class Asset{
	public:

		///< Manager for asset objects
		friend class AssetManager;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Copy constructor.</summary>
		///
		/// <param name="type"> The type.</param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		Asset(AssetType type);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Destructor.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual ~Asset() {}

		///< Filename of the asset being loaded
		std::string m_sFilename;

		///< The type of asset being loaded
		AssetType type;

		///< Number of objects referencing the Asset object
		int m_iRefCount;

		///< true if the Asset should be deleted.
		bool m_bIsCached;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Adds 1 to the reference count for the Asset object.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void AddReference() noexcept;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Removes 1 from the reference count for the Asset object.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void RemoveReference();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Reloads the Asset. This is an abstract function.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual void Reload()=0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Gets the name of the Asset.</summary>
		///
		/// <returns> The name.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		std::string GetName();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Gets the extension (file-type) of the Asset.</summary>
		///
		/// <returns> The extension.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		std::string GetExtension();

	protected:

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Unloads this Asset object and frees the memory being used.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual void Unload() = 0;
	};
};
#endif
