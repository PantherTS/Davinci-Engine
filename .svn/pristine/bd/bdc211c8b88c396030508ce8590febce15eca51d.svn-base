#ifndef GRAPHIC_H
#define GRAPHIC_H

#include "gl/glew.h"
#include "Vec2D.h"
#include "SDL/SDL.h"

namespace DavinciEngine{
	
	class Object;
	class TextureAsset;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary> Values that represent BlendType. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	enum BlendType
	{
		BLEND_NONE=0,
		BLEND_ALPHA,
		BLEND_ADDITIVE,
		BLEND_MULTIPLY,
	};

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary> The Graphic object is an OpenGL renderable object that can be assigned
	/// 		  to any object that has an assigned texture.  </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	class Graphic
	{
	public:

		/// <summary> The position of the Graphic </summary>
		Vec2D position;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Renders the object.</summary>
		///
		////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual void Render()=0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Gets the width and height of the Graphic.</summary>
		///
		/// <param name="width">  [in,out] If non-null, the width.</param>
		/// <param name="height"> [in,out] If non-null, the height.</param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual void GetWidthHeight(int *width, int *height)=0;
	};

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary> Open GL wrapper class. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	class OpenGL{
	public:

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Gets the instance.</summary>
		///
		/// <returns> null if it fails, else the instance.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		static OpenGL *GetInstance();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Destructor.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		~OpenGL();
		void BeginFrame();
		void EndFrame();
		void ShowBuffer(SDL_Window *window);
		void BindTexture(TextureAsset *textureAsset);
		void Translate(float x, float y, float z);
		void Translate(const Vec2D &pos);
		void Scale(const Vec2D &pos);
		void PushMatrix();
		void PopMatrix();
		void Rotate(float r, float ax, float ay, float az);
		void SetBlend(BlendType blend);
		void SetColor(float r, float g, float b);
		void MakeQuad(float width, float height, const Vec2D &textureOffset=Vec2D::zero, const Vec2D &textureScale=Vec2D::one, const Vec2D &position=Vec2D::zero);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Gets the screen center.</summary>
		///
		/// <returns> The screen center.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		Vec2D GetScreenCenter();


		/// <summary> The resolution scale </summary>
		Vec2D m_vec2ResolutionScale;

		/// <summary> The screen center coordinates </summary>
		Vec2D m_vec2ScreenCenter;
	private:

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Default constructor.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		OpenGL();

		/// <summary> The pointer to the  OpenGL wrapper class </summary>
		static OpenGL *m_pOpenGL;

		/// <summary> Identifier for the last texture ID </summary>
		unsigned int lastTexID;

		/// <summary> The current blend type </summary>
		BlendType currentBlend;

		/// <summary> true to reset the background </summary>
		bool m_bBGReset;
	};
};
#endif