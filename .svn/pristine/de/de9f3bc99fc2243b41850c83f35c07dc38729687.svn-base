#include "GL/glew.h"
#include "Window.h"
#include "Graphic.h"
#include <memory>

using namespace DavinciEngine;

std::list<Window*> Window::m_Windows;

Window::Window(const std::string &title,int width, int height, int bpp, bool fullscreen):
m_sTitle(title),m_iWidth(width),m_iHeight(height),m_iBpp(bpp),m_bFullscreen(fullscreen),m_iFlags(SDL_WINDOW_OPENGL)
,m_pScreen(nullptr)
{
}

Window::~Window()
{
}

void Window::Destroy(){
	Destroy(this->m_sTitle);
}

void Window::Destroy(const std::string &title){
	for(std::list<Window*>::iterator i = m_Windows.begin(); i != m_Windows.end();){
		if((*i)->m_sTitle == title){
			delete (*i);
			i = m_Windows.erase(i);
		}
		else{
			++i;
		}
	}

	if(m_Windows.empty()){
		SDL_Quit();
	}
}

Window *Window::NewWindow(const std::string &title, int width, int height, int bpp, bool fullscreen)
{
	Window *m_pWindow = new Window(title,width,height,bpp,fullscreen);

	if(!m_pWindow->SDLInit()){
		return nullptr;
	}
	
	m_pWindow->OGLInit();

	m_Windows.push_back(m_pWindow);
	return m_pWindow;
}

Window *Window::GetWindow(const std::string &title){
	for (std::list<Window*>::iterator i = m_Windows.begin(); i != m_Windows.end(); ++i)
	{
		if( (*i)->m_sTitle == title){
			return *i;
		}
	}
	return nullptr;
}

bool Window::SDLInit(){
	if( SDL_Init( SDL_INIT_VIDEO ) != 0 ) 
	{		
		Error("SDL could not be intialized! SDL Error: %s", SDL_GetError());
		return false;
	}

	// All values are "at least"!	
	SDL_GL_SetAttribute(SDL_GL_RED_SIZE, 5);
	SDL_GL_SetAttribute(SDL_GL_GREEN_SIZE, 5);
	SDL_GL_SetAttribute(SDL_GL_BLUE_SIZE, 5);
	SDL_GL_SetAttribute(SDL_GL_ALPHA_SIZE, 5);
	SDL_GL_SetAttribute(SDL_GL_DEPTH_SIZE, 16);
	SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, 1);
	SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 3);
	SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 1);
	SDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK, SDL_GL_CONTEXT_PROFILE_CORE);

	if (m_bFullscreen)
	{
		m_iFlags |= SDL_WINDOW_FULLSCREEN;
	}

	// Create the window
	m_pScreen = SDL_CreateWindow( m_sTitle.c_str(), SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, m_iWidth, m_iHeight, m_iFlags );

	if (m_pScreen == nullptr)
	{
		Error("Window could not be created! SDL Error: %s", SDL_GetError());
		return false;
	}

	// Create the SDL OpenGL Context
	m_GLContext = SDL_GL_CreateContext(m_pScreen);

	if (m_GLContext == nullptr)
	{
		Error("OpenGL context could not be created! SDL Error: %s", SDL_GetError());
		return false;
	}

	// Activate Vsync - Will probably make this a menu setting later.
	if (SDL_GL_SetSwapInterval(1) < 0)
	{
		Warning("Unable to set VSync! SDL Error: %s\n", SDL_GetError());
	}

	// Enable the mouse cursor
	SDL_ShowCursor(SDL_ENABLE);

	return true;
}

void Window::OGLInit(){

	GLenum glewError = GL_NO_ERROR;

	// Initialize GLEW
	glewExperimental = GL_TRUE;
	glewError = glewInit();
	if (glewError != GLEW_OK)
	{
		// GLEW failed!
		Error("GLEW failed to initialize! Error: %s", glewGetErrorString(glewError));
		exit(1);
	}

	glEnable(GL_BLEND);
	glDisable(GL_LIGHTING);
	glEnable(GL_TEXTURE_2D);
	glCullFace(GL_BACK);
	//glShadeModel(GL_SMOOTH);	
	glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
	glClearDepth(1.0f);
	glDisable(GL_DEPTH_TEST);

	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	OpenGL::GetInstance()->ShowBuffer(this->m_pScreen);

	GLint viewPort[4];
	glGetIntegerv(GL_VIEWPORT, viewPort);

	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();

	glOrtho(0.0f, m_iWidth, m_iHeight, 0.0f, -1.0, 1.0);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();

	OpenGL::GetInstance()->m_vec2ResolutionScale = Vec2D::one;
	OpenGL::GetInstance()->m_vec2ScreenCenter = Vec2D(static_cast<float>(m_iWidth)/2.0f,static_cast<float>(m_iHeight)/2.0f);
}

void Window::SetSize(int width, int height, bool fullscreen)
{	
	m_iHeight = height;
	m_iWidth = width;
	m_bFullscreen = fullscreen;

	SDLInit();
	OGLInit();

	XmlSettings::GetInstance()->SetWidth(m_iWidth);
	XmlSettings::GetInstance()->SetHeight(m_iHeight);
	XmlSettings::GetInstance()->SetBPP(m_iBpp);
	XmlSettings::GetInstance()->SetFullscreen(m_bFullscreen);
	XmlSettings::GetInstance()->SaveSettings();
}