#ifndef UICONTROL_H
#define UICONTROL_H

#include "Transform.h"
#include "Input.h"
#include "Vec2D.h"

#include <map>

namespace DavinciEngine {

	class Graphic;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary> The base object class for User Interface Controls. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	class UIControl : public Transform
	{
	public:
		UIControl();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Renders this UI Object.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void Render();

	protected:
		~UIControl();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Updates this UI Object. </summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual void Update() = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		///<summary> Virtual function to check for input on the UI control. </summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual void InputChecks() = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Query if this UI Object is enabled.</summary>
		///
		/// <returns> true if enabled, false if not.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		const bool IsEnabled();

		/// <summary>  Object's pointer to the Input system for event detection at the Object level </summary>
		Input* m_pInput;

		///<summary> The storage container for the possible inputs this UI Control can take. </summary>
		std::map<std::string, std::string> m_mapInputs;

	private:
		Graphic* m_pGraphic;

		Vec2D position;

		bool m_bIsEnabled;
	};
};
#endif