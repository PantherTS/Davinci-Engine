#ifndef DAVINCI_H
#define DAVINCI_H

#include <string>

namespace DavinciEngine{

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary> The Davinci class is the primary engine object. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	class __declspec(dllexport) Davinci
	{
	private:

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Default constructor.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		Davinci();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Destructor.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		~Davinci();

		/// <summary> The pointer to the engine instance </summary>
		static Davinci *m_pDavinci;

	public:

		// Game Engine Main Functions

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Gets the engine instance.</summary>
		///
		/// <returns> null if it fails, else.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		static Davinci *Engine_GetInstance ( void );

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Destroys the engine.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void Engine_Destroy( void );

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Initializes the engine for startup.</summary>
		///
		/// <returns> true if it succeeds, false if it fails.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		bool Engine_Init();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Triggers an update to all the engine's subsystems.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void Engine_Update();

		// Game Timer Functions

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Starts the engine timer.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void TimerStart();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Pauses the engine.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void TimerPause();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Gets the current timer ticks.</summary>
		///
		/// <returns> .</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		float TimerGetTicks();

		// Game Mode Manager Functions

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Gets the game mode.</summary>
		///
		/// <returns> The game mode.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		int GetGameMode();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Sets the game mode.</summary>
		///
		/// <param name="mode"> The mode.</param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void SetGameMode(int mode);

		// Game Script Engine

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Executes the script operation.</summary>
		///
		/// <param name="scriptFile"> The script file.</param>
		///
		/// <returns> true if it succeeds, false if it fails.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		bool RunScript(const char *scriptFile);

		// Game Graphics Functions

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Sets the resolution of the display.</summary>
		///
		/// <param name="windowWidth">  Width of the window.</param>
		/// <param name="windowHeight"> Height of the window.</param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void SetResolution(int windowWidth, int windowHeight);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Sets fullscreen mode.</summary>
		///
		/// <param name="fullscreen"> true to fullscreen.</param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void SetFullscreen(bool fullscreen);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Query if the engine is in fullscreen mode.</summary>
		///
		/// <returns> true if fullscreen, false if not.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		bool IsFullscreen();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Gets the window width.</summary>
		///
		/// <returns> The window width.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		int GetWindowWidth();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Gets the window height.</summary>
		///
		/// <returns> The window height.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		int GetWindowHeight();

		// Game Logging Functions

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Engine log message.</summary>
		///
		/// <param name="message"> The message.</param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void Engine_Log(const char *message);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Engine warning message.</summary>
		///
		/// <param name="warning"> The warning message.</param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void Engine_Warning(const char *warning);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Engine error message.</summary>
		///
		/// <param name="error"> The error message.</param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void Engine_Error(const char *error);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Engine fatal error message.</summary>
		///
		/// <param name="fatalerror"> The fatal error message.</param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void Engine_FatalError(const char *fatal_error);


		// Game Object Functions (The following are going to be moving to pure LUA driven functions)

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Clears the scene.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void ClearScene();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Loads an actor.</summary>
		///
		/// <param name="type"> The type of actor to load.</param>
		/// <param name="xPos"> The x coordinate position.</param>
		/// <param name="yPos"> The y coordinate position.</param>
		///
		/// <returns> true if it succeeds, false if it fails.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		bool LoadActor(const char *type, float xPos, float yPos);
	};
}
#endif
