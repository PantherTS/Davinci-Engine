#ifndef WINDOW_H
#define WINDOW_H

#include <string>
#include <list>
#include <SDL/SDL.h>
#include "Vec2D.h"

namespace DavinciEngine{

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary> The Window class represents a visible viewport. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	class Window
	{
	public:
		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Creates a new window.</summary>
		///
		/// <param name="title">	  The title.</param>
		/// <param name="width">	  The width.</param>
		/// <param name="height">	  The height.</param>
		/// <param name="bpp">		  The bpp.</param>
		/// <param name="fullscreen"> true to fullscreen.</param>
		///
		/// <returns> null if it fails, else the pointer to the Window singleton </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		static Window *NewWindow(const std::string &title, int width, int height, int bpp, bool fullscreen);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Gets the singleton instance of the window </summary>
		/// <returns> A pointer to the Window singleton </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		static Window* GetInstance();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Destroys this object.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void Destroy();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Sets the size of the window.</summary>
		///
		/// <param name="width">	  The width.</param>
		/// <param name="height">	  The height.</param>
		/// <param name="fullscreen"> true to fullscreen.</param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void SetSize(int width, int height, bool fullscreen);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Gets the height.</summary>
		///
		/// <returns> The height.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		const int GetHeight() noexcept {return m_iHeight;};

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Gets the width.</summary>
		///
		/// <returns> The width.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		const int GetWidth() noexcept {return m_iWidth;};

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Query if this object is fullscreen.</summary>
		///
		/// <returns> true if fullscreen, false if not.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		const bool IsFullscreen() noexcept {return m_bFullscreen;};

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Sets the coordinates for the center of the current window </summary>
		///
		/// <param name="center"> The XY coordinates of the center of the window </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void SetWindowCenter(const Vec2D center) noexcept;

		/// <summary> Retrieve the coordinates for the center of the current window </summary>
		Vec2D& GetWindowCenter() { return m_vec2WindowCenter; }

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Sets the scale for the current window </summary>
		///
		/// <param name="scale"> The scaling to apply to both the X and Y axes </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void SetWindowScale(const Vec2D scale) noexcept;

		/// <summary> Retrieve the current window scaling on the X and Y axes </summary>
		Vec2D GetWindowScale() { return m_vec2ResolutionScale; }

		/// <summary> The SDL surface inside the window </summary>
		SDL_Window* m_pScreen;

		/// <summary> The SDL OpenGL context </summary>
		SDL_GLContext m_GLContext;
	
	private:

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Constructor.</summary>
		///
		/// <param name="title">	  The title.</param>
		/// <param name="width">	  The width.</param>
		/// <param name="height">	  The height.</param>
		/// <param name="bpp">		  The bpp.</param>
		/// <param name="fullscreen"> true to fullscreen.</param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		Window(const std::string &title,int width, int height, int bpp, bool fullscreen);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Destructor.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		~Window();

		/// <summary> A pointer to the Window singleton </summary>
		static Window* m_pWindow;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Initializes the SDL subsystem.</summary>
		///
		/// <returns> true if it succeeds, false if it fails.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		bool SDLInit();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Initializes the OpenGL subsystem.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		bool OGLInit();
		
		/// <summary> Width of the window </summary>
		int m_iWidth;

		/// <summary> Height of the window </summary>
		int m_iHeight;

		/// <summary> Defines how many Bits Per Pixel the window is displaying </summary>
		int m_iBpp;
		
		/// <summary> SDL/OpenGL window flags </summary>
		Uint32 m_iFlags;
		
		/// <summary> true to fullscreen </summary>
		bool m_bFullscreen;

		/// <summary> The window's title </summary>
		std::string m_sTitle;
		
		/// <summary> Container holding pointers to all Window objects. </summary>
		//static std::list<Window*> m_Windows;

		/// <summary> The resolution scale </summary>
		Vec2D m_vec2ResolutionScale;

		/// <summary> The screen center coordinates </summary>
		Vec2D m_vec2WindowCenter;

	};
}
#endif
