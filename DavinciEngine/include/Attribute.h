#ifndef ATTRIBUTE_H
#define ATTRIBUTE_H

#include "FileNode.h"
#include "TXMLWrapper.h"
#include <string>
#include <map>

class tinyxml2::XMLDocument;
class tinyxml2::XMLElement;

namespace DavinciEngine{

	class Attributes;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary> Values that represent AttributeType. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	enum AttributeType{INVALID=-1,INT=0,CHARACTER,FLOAT,DOUBLE};

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary> Attributes are multiple types of variables that store numerical
	/// 		  and textual information for an Object.These are created dynamically
	/// 		  via the loaded XML file for a particular Object. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	class Attribute{
	public:

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Default constructor.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		Attribute();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Copy constructor.</summary>
		///
		/// <param name="other"> The other.</param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		Attribute(const Attribute &other);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Copy constructor.</summary>
		///
		/// <param name="attributes"> [in,out] If non-null, the attributes.</param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		Attribute(Attributes *attributes);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Constructor for an integer attribute.</summary>
		///
		/// <param name="type">  The type.</param>
		/// <param name="name">  The name.</param>
		/// <param name="value"> The value.</param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		Attribute(AttributeType type, std::string name, const int &value);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Constructor for a character/string attribute.</summary>
		///
		/// <param name="type">  The type.</param>
		/// <param name="name">  The name.</param>
		/// <param name="value"> The value.</param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		Attribute(AttributeType type, std::string name, char *&value);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Constructor for a float attribute.</summary>
		///
		/// <param name="type">  The type.</param>
		/// <param name="name">  The name.</param>
		/// <param name="value"> The value.</param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		Attribute(AttributeType type, std::string name, const float &value);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Constructor for a double attribute.</summary>
		///
		/// <param name="type">  The type.</param>
		/// <param name="name">  The name.</param>
		/// <param name="value"> The value.</param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		Attribute(AttributeType type, std::string name, const double &value);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Saves this attribute to XML.</summary>
		///
		/// <param name="fileNode"> [in,out] If non-null, the FileNode * to save.</param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void Save(FileNode *fileNode);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Loads an attribute from XML.</summary>
		///
		/// <param name="fileNode"> [in,out] If non-null, the FileNode * to load.</param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void Load(FileNode *fileNode);

	private:
		friend class Attributes;

		/// <summary> Type of the attribute </summary>
		AttributeType m_pAttribType;

		/// <summary> The pointer to the Attributes storage class </summary>
		Attributes *m_pAttributes;

		/// <summary> Name of the Attribute </summary>
		std::string m_sName;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Attributes can be int,char,floats, or double values. </summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		union AttribValue{
			int m_iValue;
			char *m_pcValue;
			float m_fValue;
			double m_dValue;
		} baseAttrib;
	};

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary> Attributes is the storage container for multiple Attribute objects. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	class Attributes{
	public:

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Default constructor.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		Attributes();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Copy constructor.</summary>
		///
		/// <param name="other"> The other.</param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		Attributes(const Attributes &other);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Destructor.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		~Attributes();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Sets an integer attribute.</summary>
		///
		/// <param name="name">  The name.</param>
		/// <param name="value"> The value.</param>
		///
		/// <returns> true if it succeeds, false if it fails.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		bool SetAttribute(const std::string &name, const int &value);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Sets a character/string attribute.</summary>
		///
		/// <param name="name">  The name.</param>
		/// <param name="value"> The value.</param>
		///
		/// <returns> true if it succeeds, false if it fails.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		bool SetAttribute(const std::string &name, char *&value);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Sets a float attribute.</summary>
		///
		/// <param name="name">  The name.</param>
		/// <param name="value"> The value.</param>
		///
		/// <returns> true if it succeeds, false if it fails.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		bool SetAttribute(const std::string &name, const float &value);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Sets a double attribute.</summary>
		///
		/// <param name="name">  The name.</param>
		/// <param name="value"> The value.</param>
		///
		/// <returns> true if it succeeds, false if it fails.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		bool SetAttribute(const std::string &name, const double &value);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Retrieves an attribute of the Actor given the Attribute name.
		/// 		  Due to the multiple types allowed, it has been templated.
		/// 		  Usage: int hp = actor->m_pAttributes->GetAttribute<int>("hp");</summary>
		///
		/// <param name="name"> The name.</param>
		///
		/// <returns> The attribute.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		template <typename T> T GetAttribute(const std::string &name){
			std::map<std::string,Attribute*>::iterator it = entries.find(name);
			if(it != entries.end()){
				const Attribute *att = it->second;
				switch (att->m_pAttribType)
				{
				case INT:
					return (T)att->baseAttrib.m_iValue;
					break;
				case FLOAT:
					return (T)att->baseAttrib.m_fValue;
					break;
				case DOUBLE:
					return (T)att->baseAttrib.m_dValue;
					break;
				default :
					break;
				}
			}
			return 0;
		};

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Retrieves an attribute of the Actor given the Attribute name.
		/// 		  Due to the multiple types allowed, it has been templated.
		/// 		  Usage: std::string name = actor->m_pAttributes->GetAttribute<string>("name");</summary>
		///
		/// <param name="name"> The name.</param>
		///
		/// <returns> null if it fails, else the attribute.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		template <> char *GetAttribute(const std::string &name){
			std::map<std::string,Attribute*>::iterator it = entries.find(name);
			if(it != entries.end()){
				Attribute *att = it->second;
				return att->baseAttrib.m_pcValue;
			}
			return nullptr;
		};

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Saves all attributes to XML file.</summary>
		///
		/// <param name="document"> [in,out] If non-null, the tinyxml2::XMLDocument * to save.</param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void Save(tinyxml2::XMLDocument *document);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Loads attributes from an XML file.</summary>
		///
		/// <param name="element"> [in,out] If non-null, the tinyxml2::XMLElement * to load.</param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void Load(tinyxml2::XMLElement *element);
	private:
		friend class Attribute;

		/// <summary> The attributes currently loaded and stored in this object </summary>
		std::map<std::string, Attribute*> entries;
	};
}
#endif