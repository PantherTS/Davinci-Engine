#ifndef INPUT_H
#define INPUT_H

#include "Framework.h"
#include "sdl/sdl.h"
#include "Vec2D.h"

namespace DavinciEngine{

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary> The Input singleton handles all input into the engine from an end-user. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	class Input
	{
	public:

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Destructor.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		~Input();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Gets the instance.</summary>
		///
		/// <returns> null if it fails, else the instance.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		static Input *GetInstance();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Destroys this object.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		static void Destroy();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Gets the mouse position.</summary>
		///
		/// <returns> The mouse position.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		Vec2D GetMousePosition();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Query if 'mouseButton' is held.</summary>
		///
		/// <param name="mouseButton"> The mouse button.</param>
		///
		/// <returns> true if mouse button held, false if not.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		bool IsMouseButtonHeld(MouseButton mouseButton);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Query if 'mouseButton' is released.</summary>
		///
		/// <param name="mouseButton"> The mouse button.</param>
		///
		/// <returns> true if mouse button released, false if not.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		bool IsMouseButtonReleased(MouseButton mouseButton);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Query if 'mouseButton' is pressed.</summary>
		///
		/// <param name="mouseButton"> The mouse button.</param>
		///
		/// <returns> true if mouse button pressed, false if not.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		bool IsMouseButtonPressed(MouseButton mouseButton);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Query if 'KeyCode' is held.</summary>
		///
		/// <param name="KeyCode"> The key code.</param>
		///
		/// <returns> true if key held, false if not.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		bool IsKeyHeld(const SDL_KeyboardEvent& KeyCode);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Query if 'KeyCode' is pressed.</summary>
		///
		/// <param name="KeyCode"> The key code.</param>
		///
		/// <returns> true if key pressed, false if not.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		bool IsKeyPressed(const SDL_KeyboardEvent& KeyCode);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Query if 'KeyCode' is released.</summary>
		///
		/// <param name="KeyCode"> The key code.</param>
		///
		/// <returns> true if key released, false if not.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		bool IsKeyReleased(const SDL_KeyboardEvent& KeyCode);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Updates this object.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void Update();

	private:

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Default constructor.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		Input();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Executes the event action.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void OnEvent();

		/// <summary> The pointer to the input singleton </summary>
		static Input *m_pInput;

		/// <summary> The pointer to the framework singleton </summary>
		static Framework *m_pFramework;

		/// <summary> Holds boolean values for keyboard keys that were pressed last update </summary>
		bool previousKeys[KEY_MAX];
		
		/// <summary> Holds boolean values for keyboard keys that were pressed this update </summary>
		bool currentKeys[KEY_MAX];

		/// <summary> Holds boolean values for mouse buttons that were pressed last update </summary>
		bool previousMouseButtons[MOUSE_BUTTON_MAX];

		/// <summary> Holds boolean values for mouse buttons that were pressed this update </summary>
		bool currentMouseButtons[MOUSE_BUTTON_MAX];
	};
};
#endif