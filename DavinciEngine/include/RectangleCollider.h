#ifndef RECTANGLECOLLIDER_H
#define  RECTANGLECOLLIDER_H

#include "Collider.h"
#include "SystemTypes.h"
#include "Object.h"

namespace DavinciEngine
{
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary> The Rectangle Collider object is an axis-aligned bounding box.</summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	class RectangleCollider : public Collider
	{
	public:

		/// <summary> The width of the collider </summary>
		float width;

		/// <summary> The height of the collider </summary>
		float height;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Constructor.</summary>
		///
		/// <param name="width">  The width.</param>
		/// <param name="height"> The height.</param>
		/// <param name="offset"> (optional) the offset.</param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		RectangleCollider(float width, float height, Vec2D offset=Vec2D::zero);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Copy constructor.</summary>
		///
		/// <param name="other"> The other.</param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		RectangleCollider(RectangleCollider const &other);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Makes a deep copy of this object.</summary>
		///
		/// <returns> null if it fails, else a copy of this object.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		Collider *Clone() const override {
			return new RectangleCollider(*this);
		}

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Gets the collider type.</summary>
		///
		/// <returns> The collider type.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		ColliderType GetColliderType();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Tests if the Collider intersects a point.</summary>
		///
		/// <param name="point">		 The point.</param>
		/// <param name="collisionData"> (optional) [in,out] If non-null, information describing the
		/// 							 collision.</param>
		///
		/// <returns> true if it succeeds, false if it fails.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		bool IntersectsPoint(const Vec2D& point, CollisionData *collisionData = NULL);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Tests if the RectangleCollider intersects a line.</summary>
		///
		/// <param name="start">		 The start of the line.</param>
		/// <param name="end">			 The end of the line.</param>
		/// <param name="lineRadius">    (optional) the line radius.</param>
		/// <param name="collisionData"> (optional) [in,out] If non-null, information describing the
		/// 							 collision.</param>
		///
		/// <returns> true if it succeeds, false if it fails.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		bool IntersectsLine(const Vec2D& start, const Vec2D& end, float lineRadius = 0.0f, CollisionData *collisionData=NULL);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Gets the right-side x-coordinate of the RectangleCollider box.</summary>
		///
		/// <param name="relativeToEntity"> (optional) relative to entity.</param>
		///
		/// <returns> The right.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		float GetRight(bool relativeToEntity = false);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Gets the left-side x-coordinate of the RectangleCollider box.</summary>
		///
		/// <param name="relativeToEntity"> (optional) relative to entity.</param>
		///
		/// <returns> The left.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		float GetLeft(bool relativeToEntity = false);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Gets the top-side y-coordinate of the RectangleCollider box.</summary>
		///
		/// <param name="relativeToEntity"> (optional) relative to entity.</param>
		///
		/// <returns> The top.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		float GetTop(bool relativeToEntity = false);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Gets the bottom-side y-coordinate of the RectangleCollider box.</summary>
		///
		/// <param name="relativeToEntity"> (optional) relative to entity.</param>
		///
		/// <returns> The bottom.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		float GetBottom(bool relativeToEntity = false);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Gets the top-left coordinate of the RectangleCollider box.</summary>
		///
		/// <param name="relativeToEntity"> (optional) the relative to entity.</param>
		///
		/// <returns> The top left.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		Vec2D GetTopLeft(bool relativeToEntity = false);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Gets the top-right coordinate of the RectangleCollider box.</summary>
		///
		/// <param name="relativeToEntity"> (optional) the relative to entity.</param>
		///
		/// <returns> The top right.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		Vec2D GetTopRight(bool relativeToEntity = false);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Gets the bottom-left coordinate of the RectangleCollider box.</summary>
		///
		/// <param name="relativeToEntity"> (optional) the relative to entity.</param>
		///
		/// <returns> The bottom left.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		Vec2D GetBottomLeft(bool relativeToEntity = false);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Gets the bottom-right coordinate of the RectangleCollider box.</summary>
		///
		/// <param name="relativeToEntity"> (optional) the relative to entity.</param>
		///
		/// <returns> The bottom right.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		Vec2D GetBottomRight(bool relativeToEntity = false);
	};
}
#endif