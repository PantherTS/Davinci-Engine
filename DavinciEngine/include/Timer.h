#ifndef TIMER_H
#define TIMER_H

//////////////////////////////////////////////////////////////////////////
//																		//
//									//
//////////////////////////////////////////////////////////////////////////

namespace DavinciEngine{

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary> This is the main game engine Timer class.  It handles keeping track
	/// 		  of the system time or "ticks".  The game speed is based on the
	/// 		  amount of time passed between checks to this class. Animation
	/// 		  frames are displayed at a constant rate using this class.
	/// 		  The Timer class also keeps track of whether or not the game has
	/// 		  been paused or is resumed from pause. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	class Timer
	{
	private:

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Default constructor.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		Timer();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Destructor.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		~Timer();

		/// <summary> The pointer to the timer object </summary>
		static Timer *m_Timer;

		/// <summary> The difference between current ticks and previous ticks. </summary>
		double deltaTime;
		
		/// <summary> The clock time when the timer started </summary>
		long startTicks;

		/// <summary> The ticks stored when the timer was paused </summary>
		long pausedTicks;

		/// <summary> The current ticks when GetTicks() was called </summary>
		long currentTicks;

		/// <summary> The ticks when GetTicks() was last called.(The frame before this one) </summary>
		long previousTicks;

		/// <summary> true if timer is paused </summary>
		bool paused;

		/// <summary> true if timer is started </summary>
		bool started;

	public:

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Gets the instance.</summary>
		///
		/// <returns> null if it fails, else the instance.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		static Timer *GetInstance();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Destroys this object.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void Destroy();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Starts the timer. </summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void start();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Stops the timer. </summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void stop();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Pauses the timer. </summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void pause();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Unpauses the timer. </summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void unpause();

		//Getters and Setters

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Updates the timer. </summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void Update();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Sets the previous ticks.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void SetPreviousTicks();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Gets the current ticks.</summary>
		///
		/// <returns> The ticks.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		long GetTicks();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Gets the delta time.</summary>
		///
		/// <returns> The delta time.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		double GetDeltaTime() noexcept { return deltaTime; };

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Query if the timer is started.</summary>
		///
		/// <returns> true if started, false if not.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		bool is_started();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Query if the timer is paused.</summary>
		///
		/// <returns> true if paused, false if not.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		bool is_paused();
	};
}
#endif