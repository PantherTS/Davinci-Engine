#ifndef ASSETMANAGER_H
#define ASSETMANAGER_H

#include "Asset.h"
#include "LowLevelSystem.h"
#include <list>
#include <string>

namespace DavinciEngine
{
	class TextureAsset;
	//class FontAsset;
	//class AudioAsset;
	//class AudioDecoder;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary> Manager for assets. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	class AssetManager
	{
	public:

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Gets the instance.</summary>
		///
		/// <returns> null if it fails, else the instance.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		static AssetManager *GetInstance();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Destroys the AssetManager.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void Destroy();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Request texture.</summary>
		///
		/// <param name="filename"> Filename of the asset file.</param>
		/// <param name="filter">   (optional) the filter.</param>
		/// <param name="repeatX">  (optional) the repeat x coordinate.</param>
		/// <param name="repeatY">  (optional) the repeat y coordinate.</param>
		///
		/// <returns> null if it fails, else.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		TextureAsset *RequestTexture(const std::string &filename, FilterType filter = FILTER_LINEAR, bool repeatX = false, bool repeatY = false);
		//static FontAsset *RequestFont(const std::string &filename, float size, int textureWidth=-1, int textureHeight=-1);
		//static AudioAsset *RequestAudio(const std::string &filename, bool streamFromDisk=false, std::string decodeString = "");

	protected:

		friend class Asset;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Removes the Asset from memory via passed pointer.</summary>
		///
		/// <param name="asset"> [in,out] If non-null, the asset.</param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void RemoveAsset(Asset *asset);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Gets the content path.</summary>
		///
		/// <returns> The content path.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		const std::string &GetContentPath();

	private:

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Default constructor.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		AssetManager();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Destructor.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		~AssetManager();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Initialises the AssetManager.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void Init();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Sets the content path.</summary>
		///
		/// <param name="contentPath"> Full pathname of the content file.</param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void SetContentPath(const std::string &contentPath);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Stores an asset.</summary>
		///
		/// <param name="asset"> [in,out] If non-null, the asset.</param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void StoreAsset(Asset *asset);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Gets an asset by filename.</summary>
		///
		/// <param name="filename"> Filename of the file.</param>
		///
		/// <returns> null if it fails, else the asset by filename.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		Asset *GetAssetByFilename(const std::string &filename);

		/// <summary> Pointer to the AssetManager instance </summary>
		static AssetManager *m_pAssetManager;

		/// <summary> List of assets in use </summary>
		std::list<Asset*> assetList;

		/// <summary> Full pathname of the content folder </summary>
		std::string contentPath;
	};
}
#endif