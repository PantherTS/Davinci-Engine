#ifndef COLLISION_H
#define COLLISION_H

#include "Collider.h"
#include "RectangleCollider.h"
#include "CollisionData.h"
#include <string>
#include <vector>
#include <list>

namespace DavinciEngine
{
	class Object;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary> Collision objects describe a collision between two Collider objects.</summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	class Collision
	{
	public:

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Default constructor.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		Collision();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Destroys this object.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void Destroy();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Gets the instance.</summary>
		///
		/// <returns> null if it fails, else the instance.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		static Collision *GetInstance();

	private:

		friend class Object;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Registers the collider with an object.</summary>
		///
		/// <param name="collider"> [in,out] If non-null, the collider.</param>
		/// <param name="object">   [in,out] If non-null, the object.</param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void RegisterColliderWithObject(Collider *collider, Object *object);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Removes the Collider pointed to by the passed in pointer.</summary>
		///
		/// <param name="collider"> [in,out] If non-null, the collider.</param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void RemoveCollider(Collider *collider);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Determines what the Object associated with this Collider has hit.</summary>
		///
		/// <param name="object">		 [in,out] If non-null, the object.</param>
		/// <param name="tag">			 The tag.</param>
		/// <param name="collisionData"> (optional) [in,out] If non-null, information describing the
		/// 							 collision.</param>
		///
		/// <returns> null if it fails, else return the other Collider.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		Collider *Collide(Object *object, const std::string &tag, CollisionData *collisionData=NULL);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Adds a reference.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void AddReference();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Rmeoves a reference.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void RemoveReference();

	private:

		/// <summary> Pointer to the Collision object </summary>
		static Collision *m_pCollision;

		/// <summary> Number of references to the Collision object </summary>
		int m_iRefCount;

		/// <summary> The Colliders involved </summary>
		std::list<Collider*> colliders;
	};
}

#endif