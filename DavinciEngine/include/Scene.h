#ifndef SCENE_H
#define SCENE_H

#include <list>
#include <map>
#include <sstream>
#include <string>
#include <regex>
#include "Object.h"
#include "Camera.h"
#include "GUI.h"
#include "Window.h"

namespace DavinciEngine{
		
		class Object;
		class GUI;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> The Scene Manager. It is a master object that holds all Objects within it 
		///			  and determines if those objects need to be updated or displayed. </summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		class Scene
		{

		public:

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary> Gets the instance.</summary>
			///
			/// <returns> null if it fails, else the instance.</returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////
			static Scene *GetInstance();

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary> Adds an object to the scene.</summary>
			///
			/// <param name="object"> [in,out] If non-null, the Object * to add.</param>
			////////////////////////////////////////////////////////////////////////////////////////////////////
			void Add(Object *object);

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary> Removes an object from the scene.</summary>
			///
			/// <param name="object"> [in,out] If non-null, the Object * to remove.</param>
			////////////////////////////////////////////////////////////////////////////////////////////////////
			void Remove(Object *object);

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary> Destroys the scene.</summary>
			////////////////////////////////////////////////////////////////////////////////////////////////////
			void Destroy();

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary> Updates the scene and all objects in it.</summary>
			////////////////////////////////////////////////////////////////////////////////////////////////////
			void Update();

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary> Renders the scene and all objects in it.</summary>
			////////////////////////////////////////////////////////////////////////////////////////////////////
			void Render();

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary> Generates a unique ID for storing an Object in the SceneObjects map.</summary>
			///
			/// <param name=""> The.</param>
			///
			/// <returns> The new identifier.</returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////
			std::string GetNewID( std::string );

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary> Used to determine if there is a duplicate Object type present in the scene.</summary>
			///
			/// <param name="objectType"> Type of the object.</param>
			///
			/// <returns> A copy of this object.</returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////
			static Object &Duplicate(const std::string &objectType);

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary> Used to determine if an object with the given objectName
			/// 		  exists in the loaded scene.</summary>
			///
			/// <param name="objectName"> Name of the object.</param>
			///
			/// <returns> true if it succeeds, false if it fails.</returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////
			bool VerifyExists(const std::string &objectName);

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary> Gets the player object.</summary>
			///
			/// <returns> The player.</returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////
			Object &GetPlayer();

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary> Clears the scene.</summary>
			////////////////////////////////////////////////////////////////////////////////////////////////////
			void ClearScene();

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary> Gets a list of nearby object types.</summary>
			///
			/// <param name="objects">	   [in,out] [in,out] If non-null, the objects.</param>
			/// <param name="otherObject"> [in,out] If non-null, the other object.</param>
			/// <param name="range">	   The range.</param>
			////////////////////////////////////////////////////////////////////////////////////////////////////
			void GetNearbyObjectTypes(std::list<Object*> &objects,Object* otherObject, float range);

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary> Called by an entity when its tag has changed; the scene must
			/// 		  reposition that entity in the tag map</summary>
			///
			/// <param name="object"> [in,out] If non-null, the object.</param>
			/// <param name="tag">    The tag.</param>
			////////////////////////////////////////////////////////////////////////////////////////////////////
			void ObjectAddTag(Object *object, const std::string& tag);

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary> Removes a tag from an object.</summary>
			///
			/// <param name="object"> [in,out] If non-null, the object.</param>
			/// <param name="tag">    The tag.</param>
			////////////////////////////////////////////////////////////////////////////////////////////////////
			void ObjectRemoveTag(Object *object, const std::string& tag);

			//Tagging Functions

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary> Gets the first tag of an object. </summary>
			///
			/// <param name="tag"> The tag.</param>
			///
			/// <returns> null if it fails, else the first tag.</returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////
			Object *GetFirstTag(const std::string& tag);

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary> Gets all tags and returns them in a list.</summary>
			///
			/// <param name="tag"> The tag.</param>
			///
			/// <returns> null if it fails, else all tags are returned.</returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////
			std::list<Object*> *GetAllTags(const std::string& tag);

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary> Gets total tag count.</summary>
			///
			/// <param name="tag"> The tag.</param>
			///
			/// <returns> The tag count.</returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////
			const int GetTagCount(const std::string& tag);

			// Camera Functions

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary> Adds a camera to the scene. </summary>
			///
			/// <param name="camera"> [in,out] If non-null, the camera.</param>
			////////////////////////////////////////////////////////////////////////////////////////////////////
			void AddCamera(Camera *camera);

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary> Gets a camera by index.</summary>
			///
			/// <param name="cameraIndex"> (optional) zero-based index of the cameras.</param>
			///
			/// <returns> null if it fails, else the camera.</returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////
			const Camera *GetCamera(int cameraIndex=0);
			

			/// <summary> true if object is visible </summary>
			bool m_bIsVisible;

			/// <summary> The pointer to the graphical user interface </summary>
			GUI* m_pGUI;

		protected:

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary> Resolve object changes in the scene (adds and deletes).</summary>
			////////////////////////////////////////////////////////////////////////////////////////////////////
			void ResolveObjectChanges();
			
		private:

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary> Default constructor.</summary>
			////////////////////////////////////////////////////////////////////////////////////////////////////
			Scene();

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary> Destructor.</summary>
			////////////////////////////////////////////////////////////////////////////////////////////////////
			~Scene();

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary> Destroys all cameras.</summary>
			////////////////////////////////////////////////////////////////////////////////////////////////////
			void DestroyAllCameras();

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary> Updates the layer list by</summary>
			///
			/// <param name="object"> [in,out] If non-null, the object.</param>
			////////////////////////////////////////////////////////////////////////////////////////////////////
			void UpdateLayerList(Object *object, bool remove);
			
			/// <summary> The pointer to the scene singelton </summary>
			static Scene *m_pScene;

			Window *m_pWindow;

			/// <summary> Storage container for the objects present in the scene sorted by Object Name. </summary>
			static std::map<std::string,Object*> SceneObjects;

			/// <summary> Storage container for the objects present in the scene sorted by Object Name. </summary>
			static std::multimap<int,Object*> LayeredSceneObjects;

			/// <summary> Storage container for the objects that will be added on next update. </summary>
			static std::map<std::string,Object*> toAdd;

			/// <summary> Storage container for the objects that will be removed on next update. </summary>
			static std::map<std::string,Object*> toRemove;

			/// <summary> Storage container for the cameras present in the scene. </summary>
			static std::list<Camera*> cameras;
			
			/// <summary> The storage map of entities sorted by tag </summary>
			static std::map<std::string, std::list<Object*> > tagMap;
		};
};
#endif