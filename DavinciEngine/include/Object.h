#ifndef OBJECT_H
#define OBJECT_H

#include "Vec2D.h"
#include "Transform.h"
#include "LowLevelSystem.h"
#include "tinyxml2.h"
#include <vector>
#include <string>
#include <map>

class tinyxml2::XMLDocument;
class tinyxml2::XMLElement;

namespace DavinciEngine{

	class Collision;
	class Collider;
	class CollisionData;
	class Graphic;
	class Input;
	class Scene;

	enum ObjectType{
		ACTOR
	};

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary> Objects are everything that can be loaded into a Scene. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	class Object : public Transform
	{
		friend class Scene;
		friend class Collision;

	public:
		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Query if Object has a particular tag.</summary>
		///
		/// <param name="tag"> The tag.</param>
		///
		/// <returns> true if tag, false if not.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		const bool HasTag(const std::string& tag);

	protected:
		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Default constructor.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		Object();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Adds this object to the deletion queue for the scene it is found in. </summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void Destroy();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Enables this object.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual void Enable();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Disables this object.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual void Disable();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Executes an action when added.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual void OnAdd();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Executes an action when removed.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual void OnRemove();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Renders this Object.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual void Render();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Updates this Object.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual void Update() = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Gets the type of Object.</summary>
		///
		/// <returns> The type.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual const std::string &GetType() = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Query if this Object is enabled.</summary>
		///
		/// <returns> true if enabled, false if not.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		const bool IsEnabled();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Gets the name of the Object.</summary>
		///
		/// <returns> The name.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		const std::string& GetName() {return m_sObjectName;};

		// Tagging Functions

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Adds a tag to the Object. </summary>
		///
		/// <param name="tag"> The tag to add.</param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void AddTag(const std::string& tag);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Removes a tag from the Object.</summary>
		///
		/// <param name="tag"> The tag to remove.</param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void RemoveTag(const std::string& tag);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Gets a tag by index from the Object.</summary>
		///
		/// <param name="index"> Zero-based index of the tag.</param>
		///
		/// <returns> The tag.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		const std::string& GetTag(int index);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Gets the number of tags the Object has.</summary>
		///
		/// <returns> The number of tags.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		const int GetNumberOfTags();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Loads the tags for the Object from XML data file.</summary>
		///
		/// <param name="element"> [in,out] If non-null, the element.</param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void LoadTags(tinyxml2::XMLElement *element);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Saves the Object's tags out to an XML datafile.</summary>
		///
		/// <param name="document"> [in,out] If non-null, the document.</param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void SaveTags(tinyxml2::XMLDocument *document);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Copies the tags from another Object.</summary>
		///
		/// <param name="other"> [in,out] If non-null, another instance to copy.</param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void CopyTags(const Object &other);

		// Graphics Functions

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Sets a graphic as being associated with this Object.</summary>
		///
		/// <param name="graphic"> [in,out] If non-null, the graphic.</param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void SetGraphic(Graphic *graphic);

		// Collision Functions

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Sets a collider as being associated with this Object.</summary>
		///
		/// <param name="collider"> [in,out] If non-null, the collider.</param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void SetCollider(Collider *collider);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Gets the collider associated with this Object.</summary>
		///
		/// <returns> null if it fails, else the Collider associated with this Object.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		Collider* GetCollider() const;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> If a collision occurs, return the Collider associated with this Object.</summary>
		///
		/// <param name="tag">			 The tag.</param>
		/// <param name="collisionData"> (optional) [in,out] If non-null, information describing the
		/// 							 collision.</param>
		///
		/// <returns> null if it fails, else return the Collider associated with this Object.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		Collider* Collide( const std::string &tag, CollisionData *collisionData=nullptr );

		// Input Functions

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Input checks done to determine if user is interacting with the Object.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual void InputChecks();


		/// <summary> Depth of the Object in the Scene </summary>
		float m_fDepth;

		/// <summary> true if Object is visible in a Scene </summary>
		bool m_bIsVisible;

		/// <summary> The coordinates of the Camera on the Object </summary>
		Vec2D m_vec2FollowCamera; 

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Loads the inputs that are possible for this Object from the XML data file.</summary>
		///
		/// <param name="element"> [in,out] If non-null, the element.</param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void LoadInputs( tinyxml2::XMLElement *element );

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Destructor.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		~Object();

		/// <summary> Pointer to the Scene the Object has been added to </summary>
		Scene *m_pScene;

		/// <summary> Object's pointer to the Collision class for this Object </summary>
		Collision *m_pCollision;
		
		/// <summary>  Object's pointer to the Input system for event detection at the Object level </summary>
		Input *m_pInput;
		
		/// <summary> The unique name of the Object in the GameObject's storage map. </summary>
		std::string m_sObjectName;

		/// <summary> Type of the Object </summary>
		ObjectType objectType;

		/// <summary> The storage container for the possible inputs this Object can take </summary>
		std::map<std::string,std::string> inputs;

	private:
		/// <summary> Object's pointer to the CollisionType for this Object </summary>
		Collider* m_pCollider;

		/// <summary> Object's pointer to the assigned m_pGraphic for this Object. </summary>
		Graphic* m_pGraphic;

		/// <summary> True - Object is visible to player. False - Object is invisible to player </summary>
		bool m_bIsEnabled;

		/// <summary> Object's vector of identification tags. </summary>
		std::vector<std::string> tags;
	};
};
#endif
