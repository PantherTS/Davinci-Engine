#ifndef SPRITEANIMATION_H
#define SPRITEANIMATION_H

#include "Sprite.h"
#include "FileNode.h"
#include "TextureAtlas.h"
#include "tinyxml2.h"
#include <list>
#include <map>

class tinyxml2::XMLDocument;
class tinyxml2::XMLElement;

namespace DavinciEngine
{
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary> The Animation class holds information loaded from an object's XML
	///			data file that defines a complete animation. Information includes
	///			the name, start frame, end frame, and speed of the animation.</summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	class Animation
	{
	public:

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Constructor.</summary>
		///
		/// <param name="name">  The name of the animation.</param>
		/// <param name="start"> The start frame.</param>
		/// <param name="end">   The end frame.</param>
		/// <param name="speed"> The speed of the animation.</param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		Animation(const std::string &name, int start, int end, float speed);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Default constructor.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		Animation();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Saves the given animation out to an XML data file</summary>
		///
		/// <param name="fileNode"> [in,out] If non-null, the FileNode * to save.</param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void Save(FileNode *fileNode);


		/// <summary> true if the animation is playing </summary>
		bool isPlaying;

		/// <summary> The name of the animation </summary>
		const std::string name;

		/// <summary> The current frame of the animation </summary>
		float frame;

		/// <summary> The speed at which the animation is playing(1=normal) </summary>
		float speed;

		/// <summary> The start frame of the animation </summary>
		int start;

		/// <summary> The end frame of the animation </summary>
		int end;
	};

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary> The SpriteAnimation class controls the playback of multiple Animation
	///			objects.</summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	class SpriteAnimation : public Sprite
	{
	public:

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Constructor.</summary>
		///
		/// <param name="filename">	    Filename of the file.</param>
		/// <param name="filter">	    The filter type being used.</param>
		/// <param name="width">	    The width of the animation.</param>
		/// <param name="height">	    The height of the animation.</param>
		/// <param name="textureAtlas"> (optional) [in,out] If non-null, the texture atlas.</param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		SpriteAnimation(const std::string &filename, FilterType filter, float width, float height,TextureAtlas *textureAtlas=NULL);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Copy constructor.</summary>
		///
		/// <param name="other"> The other animation to copy.</param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		SpriteAnimation(const SpriteAnimation &other);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Destructor.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		~SpriteAnimation();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Adds another animation.</summary>
		///
		/// <param name="name">  The name of the animation.</param>
		/// <param name="start"> The start frame.</param>
		/// <param name="end">   The end frame.</param>
		/// <param name="speed"> The speed of the animation.</param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void Add(const std::string &name, int start, int end, float speed);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Plays the animation.</summary>
		///
		/// <param name="name"> The name of the animation to play.</param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void Play(const std::string &name);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Stops an animation that is playing.</summary>
		///
		/// <param name="name"> The name of the animation to stop.</param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void Stop(const std::string &name);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Gets an animation by name.</summary>
		///
		/// <param name="name"> The name of the animation to find.</param>
		///
		/// <returns> null if it fails, else the animation.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		Animation *GetAnimation(const std::string &name);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Renders the SpriteAnimation.</summary>
		///
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void Render();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Animates this object.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void Animate();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Saves the SpriteAnimation to XML.</summary>
		///
		/// <param name="document"> [in,out] If non-null, the tinyxml2::XMLDocument * to save.</param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void Save(tinyxml2::XMLDocument *document);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Loads the SpriteAnimation information from XML.</summary>
		///
		/// <param name="element">	    [in,out] If non-null, the element.</param>
		/// <param name="textureAtlas"> [in,out] If non-null, the texture atlas.</param>
		///
		/// <returns> null if it fails, else.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		static SpriteAnimation *Load(tinyxml2::XMLElement *element,TextureAtlas *textureAtlas);

		/// <summary> The pointer to the TextureAtlas object </summary>
		TextureAtlas *m_pTextureAtlas;

		/// <summary> The animations </summary>
		std::list<Animation> animations;

		/// <summary> The animation </summary>
		Animation *animation;

		/// <summary> The last animation </summary>
		Animation *lastAnimation;
	private:

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Gets the action from an animation.</summary>
		///
		/// <param name="animationName"> [in,out] Name of the animation.</param>
		///
		/// <returns> The action from animation.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		std::string GetActionFromAnimation(const std::string &animationName);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Gets a facing direction from animation.</summary>
		///
		/// <param name="animationName"> [in,out] Name of the animation.</param>
		///
		/// <returns> The facing dir from animation.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		Direction GetFacingDirFromAnimation(const std::string &animationName);

		/// <summary> Name of the last animation </summary>
		std::string m_sLastAnimationName;

		/// <summary> The default animation </summary>
		std::string m_sDefaultAnimation;
	};
}
#endif