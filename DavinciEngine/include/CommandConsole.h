#ifndef LOGGER_H
#define LOGGER_H

#include "Timer.h"
#include <string>
#include <deque>

namespace DavinciEngine{

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary> In-game command console class for logging and script execution. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	class cCommandConsole
	{
	public:

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Gets the instance.</summary>
		///
		/// <returns> null if it fails, else the instance.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		static cCommandConsole *GetInstance( void );

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Command entered.</summary>
		///
		/// <param name="e"> The event.</param>
		///
		/// <returns> true if it succeeds, false if it fails.</returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		bool CommandEntered( /*const CEGUI::EventArgs &e*/ );

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Creates the console.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void CreateConsole();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Destroys this object.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void Destroy();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Populates an entry in the console.</summary>
		///
		/// <param name="down"> true to down.</param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void PopulateEntry(bool down);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Toggles this object to display or not.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void Toggle( void );

		/// <summary> true if console is open </summary>
		static bool bConsoleOpen;

	private:

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Default constructor.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		cCommandConsole( void );

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Destructor.</summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		~cCommandConsole( void );

		/// <summary> The pointer to the command console singleton </summary>
		static cCommandConsole *m_pConsole;

		/// <summary> The pointer to the console frame containing both the input and output windows </summary>
		//CEGUI::Window *m_pConsoleFrame;

		/// <summary> The pointer to the console output window </summary>
		//CEGUI::Window  *m_pConsoleOutput;

		/// <summary> The pointer to the console input window </summary>
		//CEGUI::Window *m_pConsoleInput;

		//CEGUI::Window *m_pRootWindow;

		/// <summary> true if the console is loaded </summary>
		bool bConsoleLoaded;

		/// <summary> The previously entered messages in the command box </summary>
		std::deque<std::string> dqEnteredMessages;

		/// <summary> Iterator for the entries in the command box </summary>
		std::deque<std::string>::iterator dqEnteredMessagesIt;

		/// <summary> Lets us know if we've accessed the command box history </summary>
		bool bCommandHistory;
	};
}
#endif